//
//  AstronomyUITests.swift	//  AstronomyUITests.swift
//  AstronomyUITests	//  AstronomyUITests
//	//
//  Created by Enrique Gongora on 3/19/20.	//  Created by Enrique Gongora on 3/19/20.
//  Copyright © 2020 Lambda School. All rights reserved.	//  Copyright © 2020 Lambda School. All rights reserved.
//	//
import XCTest	import XCTest


class AstronomyUITests: XCTestCase {	class AstronomyUITests: XCTestCase {


    override func setUp() {	    enum Identifier: String {
        // Put setup code here. This method is called before the invocation of each test method in the class.	        case savePhotoButton = "PhotoDetailViewController.SaveButton"
        case nextSolButton = "PhotosCollectionViewController.NextSolButton"
        case previousSolButton = "PhotosCollectionViewController.PreviousSolButton"
        case solDetailLabel = "PhotoDetailViewController.SolDetailLabel"
        case cameraLabel = "PhotoDetailViewController.CameraLabel"
        case photoCellImageView = "PhotosCollectionViewController.ImageCell.ImageView"
        case detailVCImageView = "PhotoDetailViewController.ImageView"
    }

    // MARK: - Properties
    private var app: XCUIApplication {
        return XCUIApplication()
    }


        // In UI tests it is usually best to stop immediately when a failure occurs.	    private func button(withId id: Identifier) -> XCUIElement {
        continueAfterFailure = false	        return app.buttons[id.rawValue]
    }

    private func label(withId id: Identifier) -> XCUIElement {
        return app.staticTexts[id.rawValue]
    }

    private func imageView(withId id: Identifier) -> XCUIElement {
        return app.images[id.rawValue]
    }

    private var savePhotoButton: XCUIElement {
        return button(withId: .savePhotoButton)
    }

    private var nextSolButton: XCUIElement {
        return button(withId: .nextSolButton)
    }

    private var previousSolButton: XCUIElement {
        return button(withId: .previousSolButton)
    }


        // In UI tests it’s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.	    private var solDetailLabel: XCUIElement {
        return label(withId: .solDetailLabel)
    }	    }


    override func tearDown() {	    private var cameraLabel: XCUIElement {
        // Put teardown code here. This method is called after the invocation of each test method in the class.	        return label(withId: .cameraLabel)
    }	    }


    func testExample() {	    private var cellImageView: XCUIElement {
        // UI tests must launch the application that they test.	        return imageView(withId: .photoCellImageView)
        let app = XCUIApplication()	    }

    private var detailVCImageView: XCUIElement {
        return imageView(withId: .detailVCImageView)
    }

    private var firstCell: XCUIElement {
        return app.cells.element(boundBy: 0)
    }

    private var solDescription: XCUIElement?


    override func setUp() {
        app.launch()	        app.launch()
        continueAfterFailure = false
        solDescription = solDetailLabel
    }

    // MARK: - Test
    func testCellImageViewNotNil() {
        XCTAssertNotNil(cellImageView)
    }


        // Use recording to get started writing UI tests.	    func testViewPreviousSol() {
        // Use XCTAssert and related functions to verify your tests produce the correct results.	        XCTAssert(previousSolButton.isHittable)
        previousSolButton.tap()
        XCTAssert(solDetailLabel != solDescription)
    }

    func testViewNextSol() {
        //let solDescription = solDetailLabel
        XCTAssert(nextSolButton.isHittable)
        nextSolButton.tap()
        XCTAssert(solDetailLabel != solDescription)
    }	    }


    func testLaunchPerformance() {	    func testDetailViewHasImage() {
        if #available(macOS 10.15, iOS 13.0, tvOS 13.0, *) {	        firstCell.tap()
            // This measures how long it takes to launch your application.	        XCTAssert(detailVCImageView.exists)
            measure(metrics: [XCTOSSignpostMetric.applicationLaunch]) {	    }
                XCUIApplication().launch()	
            }	    func testSavingPhoto() {
        }	        firstCell.tap()
        XCTAssert(savePhotoButton.isHittable)
        savePhotoButton.tap()
        XCTAssertEqual(app.alerts.element.label, "Photo Saved!")
    }	    }
}	}
